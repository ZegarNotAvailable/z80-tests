0000-                 24               .sf Z80testSIO.sym
0000-                 25       ;        .in ca80.inc
0000-                 26       ;*********************************************************************
0000-                 27               .sm code           ;
C000-                 28               .or $C000          ; RAM IN ALL OF CA80
C000-                 29       ;**************************************************************************
0084-                 30       CHA_DATA     .EQ 84H    ;Data register on channel A                      *
0085-                 31       CHB_DATA     .EQ 85H    ;Data register on channel B                      *
0086-                 32       CHA_CNTR     .EQ 86H    ;Control registers on channel A                  *
0087-                 33       CHB_CNTR     .EQ 87H    ;Control registers on channel B                  *
C000-                 34       ;**************************************************************************
C000-                 35
C000-                 36
C000-                 37       ;BDOS   EQU     5
0002-                 38       WRCHR   .EQU    2
0009-                 39       WRSTR   .EQU    9
C000-                 40       ;CMDLINE        EQU     80H             ; CP/M command line offset
C000-                 41       ; SIO CHANNEL B COMMAND PORT - RC2014/SC DEFAULT
0087-                 42       SIOBC   .EQU    87H
C000-                 43
C000-                 44       ;       ORG     0100H
0000-                 45       EOS             .equ    $00             ; End of string
000D-                 46       CR              .equ    $0d             ; Carriage return
000A-                 47       LF              .equ    $0a             ; Line feed
C000-                 48       ;
C000-                 49       ;
C000-CD B6 C4         50 ( 17)     CALL        SIO_INIT            ; UART INSTEAD BDOS
C003-CD E6 C4         51 ( 17)     CALL        INIT_BUFFER     ; CIRCULAR BUFFER FOR UART
C006-AF               52 (  4)         XOR     A
C007-06 0C            53 (  7)         LD      B,MSGSIGNIN-DEBUG
C009-21 66 C2         54 ( 10)         LD      HL,DEBUG
C00C-                 55       .LOOP:
C00C-77               56 (  7)         LD      (HL),A                          ; INIT DATA AREA
C00D-23               57 (  6)         INC HL
C00E-10 FC            58 ( 8+)         DJNZ    .LOOP
C010-11 72 C2         59 ( 10)         LD      DE,MSGSIGNIN
C013-CD 58 C2         60 ( 17)         CALL    PRINTSTR
C016-                 61
C016-                 62       ;       LD      HL,CMDLINE
C016-                 63       ;       LD      A,(HL)          ; get the number of characters
C016-                 64       ;       CP      0
C016-                 65       ;       JR      Z,NOARGS
C016-                 66
C016-                 67       ; ARGS1:
C016-                 68       ;       INC     HL
C016-                 69       ;       LD      A,(HL)
C016-                 70       ;       CP      20H
C016-                 71       ;       JR      NZ,ARGS2
C016-                 72       ;       DEC     C
C016-                 73       ;       JR      NZ,ARGS1
C016-                 74
C016-                 75       ; ARGS2:
C016-                 76       ;       CP      '/'
C016-                 77       ;       JR      NZ,ARGSERR
C016-                 78       ;       INC     HL
C016-                 79       ;       DEC     C
C016-                 80       ;       JR      Z,ARGSERR
C016-                 81       ;       LD      A,(HL)
C016-                 82       ;       CP      'D'
C016-                 83       ;       JR      Z,ARGDEBUG
C016-                 84       ;       JR      ARGSERR
C016-                 85
C016-                 86       ; ARGSERR:
C016-                 87       ;       LD      DE,MSGUSAGE
C016-                 88       ;       CALL    PRINTSTR
C016-                 89       ;       RET
C016-                 90
C016-                 91       ; ARGDEBUG:
C016-                 92       ;       LD      A,1
C016-                 93       ;       LD      HL,DEBUG
C016-                 94       ;       LD      (HL),A
C016-                 95
C016-                 96       NOARGS:
C016-CD F2 C0         97 ( 17)         CALL    TESTCMOS
C019-21 67 C2         98 ( 10)         LD      HL,ISCMOS
C01C-77               99 (  7)         LD      (HL),A          ; store result to ISCMOS
C01D-                100
C01D-CD 11 C1        101 ( 17)         CALL    TESTU880
C020-21 68 C2        102 ( 10)         LD      HL,ISU880
C023-77              103 (  7)         LD      (HL),A          ; store result to ISU880
C024-                104
C024-CD 32 C1        105 ( 17)         CALL    TESTXY
C027-21 69 C2        106 ( 10)         LD      HL,XYRESULT
C02A-77              107 (  7)         LD      (HL),A
C02B-                108
C02B-                109       ;-------------------------------------------------------------------------
C02B-                110       ; Debug
C02B-                111               ; LD            HL,DEBUG
C02B-                112               ; LD            A,(HL)
C02B-                113               ; CP            0
C02B-                114               ; JR            Z,DETECTCPU
C02B-                115
C02B-                116
C02B-21 67 C2        117 ( 10)         LD      HL,ISCMOS
C02E-7E              118 (  7)         LD      A,(HL)
C02F-11 A9 C2        119 ( 10)         LD      DE,MSGRAWCMOS   ; display CMOS test result
C032-CD 58 C2        120 ( 17)         CALL    PRINTSTR
C035-CD 32 C2        121 ( 17)         CALL    PRINTHEX
C038-                122
C038-21 68 C2        123 ( 10)         LD      HL,ISU880
C03B-7E              124 (  7)         LD      A,(HL)          ; store result to ISU880
C03C-11 D7 C2        125 ( 10)         LD      DE,MSGRAWU880   ; display U880 test result
C03F-CD 58 C2        126 ( 17)         CALL    PRINTSTR
C042-CD 32 C2        127 ( 17)         CALL    PRINTHEX
C045-                128
C045-21 69 C2        129 ( 10)         LD      HL,XYRESULT
C048-7E              130 (  7)         LD      A,(HL)
C049-11 DF C2        131 ( 10)         LD      DE,MSGRAWXY     ; display XF/YF flags test result
C04C-CD 58 C2        132 ( 17)         CALL    PRINTSTR
C04F-CD 32 C2        133 ( 17)         CALL    PRINTHEX
C052-                134
C052-11 A6 C2        135 ( 10)         LD      DE,MSGCRLF
C055-CD 58 C2        136 ( 17)         CALL    PRINTSTR
C058-                137
C058-CD AF C1        138 ( 17)         CALL    TESTFLAGS       ; TEST HOW FLAGS SCF AFFECTS FLAGS
C05B-                139
C05B-                140       ;-------------------------------------------------------------------------
C05B-                141       ; CPU detection logic
C05B-                142       DETECTCPU:
C05B-                143
C05B-11 E8 C2        144 ( 10)         LD      DE,MSGCPUTYPE
C05E-CD 58 C2        145 ( 17)         CALL    PRINTSTR
C061-                146
C061-                147       ; check for U880 CPU
C061-                148
C061-21 68 C2        149 ( 10)         LD      HL,ISU880
C064-7E              150 (  7)         LD      A,(HL)
C065-FE 00           151 (  7)         CP      0                       ; Is it a U880?
C067-28 10           152 ( 7+)         JR      Z,CHECKZ80      ; check Z80 flavor
C069-                153
C069-21 69 C2        154 ( 10)         LD      HL,XYRESULT
C06C-7E              155 (  7)         LD      A,(HL)
C06D-FE FF           156 (  7)         CP      0FFH            ; does it always set XF/YF?
C06F-11 FC C2        157 ( 10)         LD      DE,MSGU880NEW
C072-28 68           158 ( 7+)         JR      Z,DONE          ; jump if a new U880/Thesys Z80
C074-11 33 C3        159 ( 10)         LD      DE,MSGU880OLD
C077-18 63           160 ( 12)         JR      DONE
C079-                161
C079-                162       ; check for Z80 type
C079-                163       CHECKZ80:
C079-                164
C079-21 67 C2        165 ( 10)         LD      HL,ISCMOS
C07C-7E              166 (  7)         LD      A,(HL)
C07D-FE 00           167 (  7)         CP      0               ; Is it a NMOS CPU?
C07F-20 2D           168 ( 7+)         JR      NZ,CHECKCMOS    ; check CMOS Z80 flavor
C081-                169
C081-                170       ; check for Sharp LH5080A
C081-21 69 C2        171 ( 10)         LD      HL,XYRESULT
C084-7E              172 (  7)         LD      A,(HL)
C085-FE 30           173 (  7)         CP      30H
C087-28 11           174 ( 7+)         JR      Z,SHARPLH5080A
C089-FE FF           175 (  7)         CP      0FFH            ; does it always set XF/YF?
C08B-28 12           176 ( 7+)         JR      Z,NMOSZ80
C08D-FE FD           177 (  7)         CP      0FDH            ; does it sometimes not set XF when FLAGS.3=1?
C08F-28 13           178 ( 7+)         JR      Z,NECU780C
C091-FE F4           179 (  7)         CP      0F4H
C093-28 14           180 ( 7+)         JR      Z,KR1858VM1
C095-11 0B C4        181 ( 10)         LD      DE,MSGNMOSUNKNOWN
C098-18 42           182 ( 12)         JR      DONE
C09A-                183
C09A-                184       SHARPLH5080A:
C09A-11 42 C3        185 ( 10)         LD      DE,MSGSHARPLH5080A
C09D-18 3D           186 ( 12)         JR      DONE
C09F-                187
C09F-                188       NMOSZ80:
C09F-11 50 C3        189 ( 10)         LD      DE,MSGNMOSZ80
C0A2-18 38           190 ( 12)         JR      DONE
C0A4-                191
C0A4-                192       NECU780C:
C0A4-11 C7 C3        193 ( 10)         LD      DE,MSGNECD780C
C0A7-18 33           194 ( 12)         JR      DONE
C0A9-                195
C0A9-                196       KR1858VM1:
C0A9-11 F5 C3        197 ( 10)         LD      DE,MSGKR1858VM1
C0AC-18 2E           198 ( 12)         JR      DONE
C0AE-                199
C0AE-                200       CHECKCMOS:
C0AE-21 69 C2        201 ( 10)         LD      HL,XYRESULT
C0B1-7E              202 (  7)         LD      A,(HL)
C0B2-FE FF           203 (  7)         CP      0FFH            ; does it always set XF/YF?
C0B4-28 17           204 ( 7+)         JR      Z,CMOSZ80
C0B6-FE 3F           205 (  7)         CP      3FH             ; does it never set YF when A.5=1?
C0B8-28 18           206 ( 7+)         JR      Z,TOSHIBA
C0BA-                207
C0BA-                208       ; test for NEC D70008AC. These CPUs seem to behave as following:
C0BA-                209       ; A.5=1 & F.5=0 => YF=1
C0BA-                210       ; A.3=1 & F.3=0 => XF is not set at all, or only sometimes is set
C0BA-                211       ; A.5=0 & F.5=1 => YF is sometimes set
C0BA-                212       ; A.3=0 & F.3=1 => XF is sometimes set
C0BA-                213       ; Note: All of 3 D70008AC that I have behave a bit differently here
C0BA-                214       ;       this might need to be updated when more tests are done
C0BA-FE 20           215 (  7)         CP      20H             ; YF is often set when A.5=1?
C0BC-30 0A           216 ( 7+)         JR      NC,CMOSUNKNOWN  ; XYRESULT > 1Fh, not a NEC...
C0BE-E6 0F           217 (  7)         AND     0FH             ; F.5=1 & A.5=0 and F.3=1 & A.3=0 results
C0C0-FE 03           218 (  7)         CP      03H             ; F.5=1 & A.5=0 never result in YF set?
C0C2-38 04           219 ( 7+)         JR      C,CMOSUNKNOWN
C0C4-E6 03           220 (  7)         AND     03H             ; F.3=1 & A.3=0 results
C0C6-20 0F           221 ( 7+)         JR      NZ,NEC
C0C8-                222
C0C8-                223       CMOSUNKNOWN:
C0C8-11 5D C4        224 ( 10)         LD      DE,MSGCMOSUNKNOWN
C0CB-18 0F           225 ( 12)         JR      DONE
C0CD-                226
C0CD-                227       CMOSZ80:
C0CD-11 22 C4        228 ( 10)         LD      DE,MSGCMOSZ80
C0D0-18 0A           229 ( 12)         JR      DONE
C0D2-                230
C0D2-                231       TOSHIBA:
C0D2-11 2F C4        232 ( 10)         LD      DE,MSGTOSHIBA
C0D5-18 05           233 ( 12)         JR      DONE
C0D7-                234
C0D7-                235       NEC:
C0D7-11 50 C4        236 ( 10)         LD      DE,MSGNECD70008AC
C0DA-18 00           237 ( 12)         JR      DONE
C0DC-                238
C0DC-                239       DONE:
C0DC-CD 58 C2        240 ( 17)         CALL    PRINTSTR
C0DF-11 A6 C2        241 ( 10)         LD      DE,MSGCRLF
C0E2-CD 58 C2        242 ( 17)         CALL    PRINTSTR
C0E5-                243       ;       RET                                     ; RETURN TO CP/M
C0E5-11 74 C4        244 ( 10)         LD      DE,MSDONE
C0E8-CD 58 C2        245 ( 17)         CALL    PRINTSTR
C0EB-11 A6 C2        246 ( 10)         LD      DE,MSGCRLF
C0EE-CD 58 C2        247 ( 17)         CALL    PRINTSTR
C0F1-F7              248 ( 11)         RST     30H         ; MONITOR CA80
C0F2-                249
C0F2-                250       ;-------------------------------------------------------------------------
C0F2-                251       ; TESTCMOS - Test if the CPU is a CMOS variety according to OUT (C),0 test
C0F2-                252       ; Note: CMOS Sharp LH5080A is reported as NMOS
C0F2-                253       ; Input:
C0F2-                254       ;       None
C0F2-                255       ; Output:
C0F2-                256       ;       A = 00 - NMOS
C0F2-                257       ;       A = FF - CMOS
C0F2-                258       ;-------------------------------------------------------------------------
C0F2-                259       TESTCMOS:
C0F2-                260       ; NMOS/CMOS CPU DETECTION ALGORITHM:
C0F2-                261       ; 1. DISABLE INTERRUPTS
C0F2-                262       ; 2. READ AND SAVE SIO CHANNEL B INTERRUPT VECTOR
C0F2-                263       ; 3. MODIFY SIO CHANNEL B INTERRUPT VECTOR USING OUT (C),<0|0FFH>
C0F2-                264       ;    (.DB 0EDH, 071H) UNDOCMENTED INSTRUCTION:
C0F2-                265       ;      ON AN NMOS CPU: OUT (C),0
C0F2-                266       ;      ON A CMOS CPU: OUT (C),0FFH
C0F2-                267       ; 4. READ AND SAVE SIO CHANNEL B INTERRUPT VECTOR
C0F2-                268       ; 5. RESTORE SIO CHANNEL B INTERRUPT VECTOR
C0F2-                269       ; 6. SET SIO REGISTER POINTER TO 0
C0F2-                270       ; 7. ENABLE INTERRUPTS
C0F2-                271       ; 8. CHECK THE VALUE READ BACK IN STEP 4
C0F2-                272       ;      0 - NMOS CPU
C0F2-                273       ;      0FFH - CMOS CPU
C0F2-                274       ;       DI
C0F2-3E 02           275 (  7)         LD      A,02H                   ; SET SIO CHANNEL B REGISTER POINTER
C0F4-                276                                                       ; TO REGISTER 2 - INTERRUPT VECTOR REGISTER
C0F4-D3 87           277 ( 11)         OUT     (SIOBC),A
C0F6-DB 87           278 ( 11)         IN      A,(SIOBC)               ; READ THE CURRENT INTERRUPT VECTOR
C0F8-47              279 (  4)         LD      B,A                             ; SAVE THE ORIGINAL VECTOR TO REGISTER B
C0F9-0E 87           280 (  7)         LD      C,SIOBC
C0FB-3E 02           281 (  7)         LD      A,02H                   ; SET SIO CHANNEL B REGISTER POINTER
C0FD-                282                                                       ; TO REGISTER 2 - INTERRUPT VECTOR REGISTER
C0FD-D3 87           283 ( 11)         OUT     (SIOBC),A
C0FF-ED 71           284               .DB     0EDH, 071H              ; UNDOCUMENTED OUT (C),<0|0FFH> INSTRUCTION
C101-                285                                                       ; WRITE 0 OR FF TO THE SIO INTERRUPT VECTOR
C101-3E 02           286 (  7)         LD      A,02H                   ; SET SIO CHANNEL B REGISTER POINTER
C103-                287                                                       ; TO REGISTER 2 - INTERRUPT VECTOR REGISTER
C103-D3 87           288 ( 11)         OUT     (SIOBC),A
C105-DB 87           289 ( 11)         IN      A,(SIOBC)               ; READ THE NEW INTERRUPT VECTOR
C107-4F              290 (  4)         LD      C,A                             ; SAVE THE NEW VECTOR TO REGISTER B
C108-3E 02           291 (  7)         LD      A,02H                   ; SET SIO CHANNEL B REGISTER POINTER
C10A-                292                                                       ; TO REGISTER 2 - INTERRUPT VECTOR REGISTER
C10A-D3 87           293 ( 11)         OUT     (SIOBC),A
C10C-78              294 (  4)         LD      A,B                             ; RESTORE THE ORIGINAL INTERRUPT VECTOR
C10D-D3 87           295 ( 11)         OUT     (SIOBC),A               ; WRITE IT TO THE SIO
C10F-                296       ;       EI
C10F-79              297 (  4)         LD      A,C                             ; VALUE WRITTEN BY OUT (C),<0|0FFH> INSTRUCTION
C110-C9              298 ( 10)         RET
C111-                299
C111-                300       ;-------------------------------------------------------------------------
C111-                301       ; TESTU880 - Check if the CPU is MME U880 or Thesys Z80
C111-                302       ; Input:
C111-                303       ;       None
C111-                304       ; Output:
C111-                305       ;       A = 0 - Non-U880
C111-                306       ;       A = 1 - U880
C111-                307       ;-------------------------------------------------------------------------
C111-                308       TESTU880:
C111-21 FF FF        309 ( 10)         LD      HL,0FFFFH
C114-01 87 01        310 ( 10)         LD      BC,00100H+SIOBC ; USE SIO CHANNEL B COMMAND PORT FOR TESTS
C117-                311
C117-                312       ;       DI
C117-3E 02           313 (  7)         LD      A,02H           ; SET SIO CHANNEL B REGISTER POINTER
C119-                314                                               ; TO REGISTER 2 - INTERRUPT VECTOR REGISTER
C119-D3 87           315 ( 11)         OUT     (SIOBC),A
C11B-DB 87           316 ( 11)         IN      A,(SIOBC)       ; READ THE CURRENT INTERRUPT VECTOR
C11D-3E 02           317 (  7)         LD      A,02H                   ; SET SIO CHANNEL B REGISTER POINTER
C11F-                318                                                       ; TO REGISTER 2 - INTERRUPT VECTOR REGISTER
C11F-D3 87           319 ( 11)         OUT     (SIOBC),A
C121-37              320 (  4)         SCF
C122-ED A3           321               .DB     0EDH,0A3H       ; Z80 OUTI INSTRUCTION
C124-F5              322 ( 11)         PUSH    AF              ; SAVE THE ORIGINAL VECTOR ON THE STACK
C125-3E 02           323 (  7)         LD      A,02H           ; SET SIO CHANNEL B REGISTER POINTER
C127-                324                                               ; TO REGISTER 2 - INTERRUPT VECTOR REGISTER
C127-D3 87           325 ( 11)         OUT     (SIOBC),A
C129-F1              326 ( 10)         POP     AF                      ; RESTORE THE ORIGINAL INTERRUPT VECTOR
C12A-D3 87           327 ( 11)         OUT     (SIOBC),A       ; WRITE IT TO THE SIO
C12C-                328       ;       EI
C12C-3E 01           329 (  7)         LD      A,1                     ; Assume it is a U880, set A = 1
C12E-38 01           330 ( 7+)         JR      C,TESTU880DONE  ; It is a U880, exit
C130-AF              331 (  4)         XOR     A                       ; Not a U880, set A = 00
C131-                332
C131-                333       TESTU880DONE:
C131-C9              334 ( 10)         RET
C132-                335
C132-                336       ;-------------------------------------------------------------------------
C132-                337       ; TESTXY - Tests how SCF (SCF) instruction affects FLAGS.5 (YF) and FLAGS.3 (XF)
C132-                338       ; Input:
C132-                339       ;       None
C132-                340       ; Output:
C132-                341       ;       A[7:6] - YF result of F = 0, A = C | 0x20 & 0xF7
C132-                342       ;       A[5:4] - XF result of F = 0, A = C | 0x08 & 0xDF
C132-                343       ;       A[3:2] - YF result of F = C | 0x20 & 0xF7, A = 0
C132-                344       ;       A[1:0] - XF result of F = C | 0x08 & 0xDF, A = 0
C132-                345       ;       Where the result bits set as follows:
C132-                346       ;       00 - YF/XF always set as 0
C132-                347       ;       11 - YF/XF always set as 1
C132-                348       ;       01 - YF/XF most of the time set as 0
C132-                349       ;       10 - YF/XF most of the time set as 1
C132-                350       ;-------------------------------------------------------------------------
C132-                351       TESTXY:
C132-0E FF           352 (  7)         LD      C,0FFH          ; loop counter
C134-                353
C134-                354       TESTXY1:
C134-21 6A C2        355 ( 10)         LD      HL,XFYFCOUNT    ; results stored here
C137-                356
C137-                357       ; check F = 0, A = C | 0x20 & 0xF7
C137-1E 00           358 (  7)         LD      E,00H           ; FLAGS = 0
C139-79              359 (  4)         LD      A,C
C13A-F6 20           360 (  7)         OR      020H            ; A.5 = 1
C13C-E6 F7           361 (  7)         AND     0F7H            ; A.3 = 0
C13E-57              362 (  4)         LD      D,A                     ; A = C | 0x20 & 0xF7
C13F-D5              363 ( 11)         PUSH    DE              ; PUSH DE TO THE STACK
C140-F1              364 ( 10)         POP             AF              ; POP A AND FLAGS FROM THE STACK (DE)
C141-37              365 (  4)         SCF                             ; SET CF FLAG, DEPENDING ON THE CPU TYPE THIS
C142-                366                                               ; ALSO MIGHT CHANGE YF AND XF FLAGS
C142-CD A5 C1        367 ( 17)         CALL    STOREYCOUNT
C145-                368
C145-                369       ; check F = 0, A = C | 0x08 & 0xDF
C145-1E 00           370 (  7)         LD      E,00H           ; FLAGS = 0
C147-79              371 (  4)         LD      A,C
C148-F6 08           372 (  7)         OR      08H                     ; A.3 = 1
C14A-E6 DF           373 (  7)         AND     0DFH            ; A.5 = 0
C14C-57              374 (  4)         LD      D,A                     ; A = C | 0x08 & 0xDF
C14D-D5              375 ( 11)         PUSH    DE              ; PUSH DE TO THE STACK
C14E-F1              376 ( 10)         POP     AF                      ; POP A AND FLAGS FROM THE STACK (DE)
C14F-37              377 (  4)         SCF                             ; SET CF FLAG, DEPENDING ON THE CPU TYPE THIS
C150-                378                                               ; ALSO MIGHT CHANGE YF AND XF FLAGS
C150-CD 9B C1        379 ( 17)         CALL    STOREXCOUNT
C153-                380
C153-                381       ; check F = C | 0x20 & 0xF7, A = 0
C153-79              382 (  4)         LD      A,C
C154-F6 20           383 (  7)         OR      020H            ; FLAGS.5 = 1
C156-E6 F7           384 (  7)         AND     0F7H            ; FLAGS.3 = 0
C158-5F              385 (  4)         LD      E,A                     ; FLAGS = C | 0x20 & 0xF7
C159-16 00           386 (  7)         LD      D,00H           ; A = 0
C15B-D5              387 ( 11)         PUSH    DE              ; PUSH DE TO THE STACK
C15C-F1              388 ( 10)         POP     AF                      ; POP A AND FLAGS FROM THE STACK (DE)
C15D-37              389 (  4)         SCF                             ; SET CF FLAG, DEPENDING ON THE CPU TYPE THIS
C15E-                390                                               ; ALSO MIGHT CHANGE YF AND XF FLAGS
C15E-CD A5 C1        391 ( 17)         CALL    STOREYCOUNT
C161-                392
C161-                393       ; check F = C | 0x08 & 0xDF, A = 0
C161-79              394 (  4)         LD      A,C
C162-F6 08           395 (  7)         OR      08H                     ; FLAGS.3 = 1
C164-E6 DF           396 (  7)         AND     0DFH            ; FLAGS.5 = 0
C166-5F              397 (  4)         LD      E,A                     ; FLAGS = C | 0x08 & 0xDF
C167-16 00           398 (  7)         LD      D,00H           ; A = 0
C169-D5              399 ( 11)         PUSH    DE              ; PUSH DE TO THE STACK
C16A-F1              400 ( 10)         POP     AF                      ; POP A AND FLAGS FROM THE STACK (DE)
C16B-37              401 (  4)         SCF                             ; SET CF FLAG, DEPENDING ON THE CPU TYPE THIS
C16C-                402                                               ; ALSO MIGHT CHANGE YF AND XF FLAGS
C16C-CD 9B C1        403 ( 17)         CALL    STOREXCOUNT
C16F-                404
C16F-0D              405 (  4)         DEC     C
C170-20 C2           406 ( 7+)         JR      NZ,TESTXY1
C172-                407
C172-0E 04           408 (  7)         LD      C,4                     ; iteration count - number of bytes
C174-21 6A C2        409 ( 10)         LD      HL,XFYFCOUNT    ; counters
C177-                410
C177-                411       TESTXY2:
C177-17              412 (  4)         RLA
C178-17              413 (  4)         RLA
C179-E6 FC           414 (  7)         AND     0FCH            ; zero two least significant bits
C17B-47              415 (  4)         LD      B,A             ; store A to B
C17C-7E              416 (  7)         LD      A,(HL)
C17D-FE 7F           417 (  7)         CP      7FH
C17F-18 08           418 ( 12)         JR      TESTXY3         ; jump if the count is 0x80 or more
C181-FE 00           419 (  7)         CP      0
C183-28 10           420 ( 7+)         JR      Z,TESTXY5               ; the count is 0 leave bits at 0
C185-3E 01           421 (  7)         LD      A,1             ; the count is between 1 and 0x7F, set result bits to 01
C187-18 0C           422 ( 12)         JR      TESTXY5
C189-                423       TESTXY3:
C189-FE FF           424 (  7)         CP      0FFH
C18B-3E 02           425 (  7)         LD      A,2             ; the count is between 0x80 and 0xFE, set result bits to 10
C18D-20 04           426 ( 7+)         JR      NZ,TESTXY4
C18F-3E 03           427 (  7)         LD      A,3             ; the count is 0xFF, set result bits to 11
C191-18 02           428 ( 12)         JR      TESTXY5
C193-                429       TESTXY4:
C193-3E 01           430 (  7)         LD      A,1             ; the count is 0x7F or less, set result bits to 01
C195-                431       TESTXY5:
C195-B0              432 (  4)         OR      B
C196-23              433 (  6)         INC     HL
C197-0D              434 (  4)         DEC     C
C198-20 DD           435 ( 7+)         JR      NZ,TESTXY2
C19A-C9              436 ( 10)         RET
C19B-                437
C19B-                438       ;-------------------------------------------------------------------------
C19B-                439       ; STOREXCOUNT - Isolates and stores XF to the byte counter at (HL)
C19B-                440       ; Input:
C19B-                441       ;       FLAGS   - flags
C19B-                442       ;       HL      - pointer to the counters
C19B-                443       ; Output:
C19B-                444       ;       HL      - incremented by 1 (points to the next counter)
C19B-                445       ; Trashes A and DE
C19B-                446       ;-------------------------------------------------------------------------
C19B-                447       STOREXCOUNT:
C19B-F5              448 ( 11)         PUSH    AF              ; transfer flags
C19C-D1              449 ( 10)         POP     DE                      ; to E register
C19D-7B              450 (  4)         LD      A,E
C19E-E6 08           451 (  7)         AND     08H                     ; isolate XF
C1A0-28 01           452 ( 7+)         JR      Z,STOREXDONE
C1A2-34              453 ( 11)         INC     (HL)            ; increment the XF counter (HL)
C1A3-                454       STOREXDONE:
C1A3-23              455 (  6)         INC     HL                      ; point to the next entry
C1A4-C9              456 ( 10)         RET
C1A5-                457
C1A5-                458       ;-------------------------------------------------------------------------
C1A5-                459       ; STOREYCOUNT - Isolates and stores YF to the byte counter at (HL)
C1A5-                460       ; Input:
C1A5-                461       ;       FLAGS   - flags
C1A5-                462       ;       HL      - pointer to the counters
C1A5-                463       ; Output:
C1A5-                464       ;       HL      - incremented by 1 (points to the next counter)
C1A5-                465       ; Trashes A and DE
C1A5-                466       ;-------------------------------------------------------------------------
C1A5-                467       STOREYCOUNT:
C1A5-F5              468 ( 11)         PUSH    AF              ; transfer flags
C1A6-D1              469 ( 10)         POP     DE                      ; to E register
C1A7-7B              470 (  4)         LD      A,E
C1A8-E6 20           471 (  7)         AND     20H                     ; isolate YF
C1AA-28 01           472 ( 7+)         JR      Z,STOREYDONE
C1AC-34              473 ( 11)         INC     (HL)            ; increment the YF counter (HL)
C1AD-                474       STOREYDONE:
C1AD-23              475 (  6)         INC     HL                      ; point to the next entry
C1AE-C9              476 ( 10)         RET
C1AF-                477
C1AF-                478       ;-------------------------------------------------------------------------
C1AF-                479       ; TESTFLAGS - TEST HOW SCF INSTRUCTION AFFECTS YF AND XF FLAGS
C1AF-                480       ; NOTE: YF IS FLAGS.5 AND XF IS FLAGS.3
C1AF-                481       ; INPUT:
C1AF-                482       ;       NONE
C1AF-                483       ; OUTPUT:
C1AF-                484       ;       PRINTED ON CONSOLE
C1AF-                485       ;-------------------------------------------------------------------------
C1AF-                486       TESTFLAGS:
C1AF-11 C3 C2        487 ( 10)         LD      DE,MSGFLAGS
C1B2-0E 09           488 (  7)         LD      C,WRSTR
C1B4-CD 7A C4        489 ( 17)         CALL    BDOS
C1B7-16 00           490 (  7)         LD      D,00H
C1B9-                491       TFLOOP1:
C1B9-1E 00           492 (  7)         LD      E,00H
C1BB-                493       TFLOOP2:
C1BB-D5              494 ( 11)         PUSH    DE
C1BC-                495       ;       DI
C1BC-D5              496 ( 11)         PUSH    DE                      ; PUSH DE TO THE STACK
C1BD-F1              497 ( 10)         POP     AF                              ; POP A AND FLAGS FROM THE STACK (DE)
C1BE-3F              498 (  4)         CCF                                     ; SET CF FLAG, DEPENDING ON THE CPU TYPE THIS
C1BF-                499                                                       ; ALSO MIGHT CHANGE YF AND XF FLAGS
C1BF-F5              500 ( 11)         PUSH    AF                      ; STORE A AND F
C1C0-D1              501 ( 10)         POP     DE                              ; NEW FLAGS IN E
C1C1-                502       ;       EI
C1C1-7B              503 (  4)         LD      A,E                             ; FLAGS TO ACCUMULATOR
C1C2-D1              504 ( 10)         POP     DE
C1C3-18 16           505 ( 12)         JR      CONT
C1C5-                506
C1C5-                507       PRINTFLAGS:
C1C5-CD 32 C2        508 ( 17)         CALL    PRINTHEX        ; PRINT ACCUMULATOR
C1C8-7B              509 (  4)         LD      A,E                             ; FLAGS TO ACCUMULATOR
C1C9-D1              510 ( 10)         POP     DE
C1CA-F5              511 ( 11)         PUSH    AF
C1CB-7A              512 (  4)         LD      A,D                             ; PRINT ORIGINAL ACCUMULATOR(FLAGS)
C1CC-CD 32 C2        513 ( 17)         CALL    PRINTHEX
C1CF-F1              514 ( 10)         POP     AF
C1D0-CD 32 C2        515 ( 17)         CALL    PRINTHEX        ; PRINT NEW FLAGS
C1D3-D5              516 ( 11)         PUSH    DE
C1D4-11 A6 C2        517 ( 10)         LD      DE,MSGCRLF
C1D7-CD 58 C2        518 ( 17)         CALL    PRINTSTR
C1DA-D1              519 ( 10)         POP     DE
C1DB-                520       CONT:
C1DB-                521
C1DB-21 6E C2        522 ( 10)         LD      HL,XFCOUNT      ; POINT TO XF COUNTER
C1DE-0F              523 (  4)         RRCA                    ; BIT 3 TO CF
C1DF-0F              524 (  4)         RRCA
C1E0-0F              525 (  4)         RRCA
C1E1-0F              526 (  4)         RRCA
C1E2-30 05           527 ( 7+)         JR      NC,TFLOOP4
C1E4-34              528 ( 11)         INC     (HL)                    ; INCREMENT COUNTER IF FLAG IS SET
C1E5-20 02           529 ( 7+)         JR      NZ,TFLOOP4              ; NO OVERFLOW
C1E7-23              530 (  6)         INC     HL                              ; MOVE TO THE HIGH BIT
C1E8-34              531 ( 11)         INC     (HL)                    ; INCREMENT HIGHER BIT
C1E9-                532
C1E9-                533       TFLOOP4:
C1E9-21 70 C2        534 ( 10)         LD      HL,YFCOUNT              ; POINT TO YF COUNTER
C1EC-0F              535 (  4)         RRCA                            ; BIT 5 TO CF
C1ED-0F              536 (  4)         RRCA
C1EE-30 05           537 ( 7+)         JR      NC,TFLOOP5
C1F0-34              538 ( 11)         INC     (HL)                    ; INCREMENT COUNTER IF FLAG IS SET
C1F1-20 02           539 ( 7+)         JR      NZ,TFLOOP5              ; NO OVERFLOW
C1F3-23              540 (  6)         INC     HL                              ; MOVE TO THE HIGH BIT
C1F4-34              541 ( 11)         INC     (HL)                    ; INCREMENT HIGHER BIT
C1F5-                542       TFLOOP5:
C1F5-1C              543 (  4)         INC     E
C1F6-20 C3           544 ( 7+)         JR      NZ,TFLOOP2
C1F8-14              545 (  4)         INC     D                               ; INCREMENT D
C1F9-20 BE           546 ( 7+)         JR      NZ,TFLOOP1
C1FB-                547
C1FB-                548       ; PRINT VALUES
C1FB-0E 04           549 (  7)         LD      C,4                             ; 4 BYTES
C1FD-21 71 C2        550 ( 10)         LD      HL,YFCOUNT+1    ; POINT AT THE MSB
C200-                551       TFLOOP6:
C200-7E              552 (  7)         LD      A,(HL)
C201-CD 32 C2        553 ( 17)         CALL    PRINTHEX
C204-2B              554 (  6)         DEC     HL
C205-0D              555 (  4)         DEC     C
C206-20 F8           556 ( 7+)         JR      NZ,TFLOOP6              ; PRINT NEXT DIGIT
C208-                557
C208-11 A6 C2        558 ( 10)         LD      DE,MSGCRLF
C20B-0E 09           559 (  7)         LD      C,WRSTR
C20D-CD 7A C4        560 ( 17)         CALL    BDOS
C210-C9              561 ( 10)         RET
C211-                562
C211-                563       ; PRINT VALUES
C211-21 71 C2        564 ( 10)         LD      HL,YFCOUNT+1    ; MSB OF YF COUNT
C214-7E              565 (  7)         LD      A,(HL)
C215-CD 32 C2        566 ( 17)         CALL    PRINTHEX
C218-2B              567 (  6)         DEC     HL                              ; LSB OF YF COUNT
C219-7E              568 (  7)         LD      A,(HL)
C21A-CD 32 C2        569 ( 17)         CALL    PRINTHEX
C21D-21 6F C2        570 ( 10)         LD      HL,XFCOUNT+1    ; MSB OF XF COUNT
C220-7E              571 (  7)         LD      A,(HL)
C221-CD 32 C2        572 ( 17)         CALL    PRINTHEX
C224-2B              573 (  6)         DEC     HL                              ; LSB OF XF COUNT
C225-7E              574 (  7)         LD      A,(HL)
C226-CD 32 C2        575 ( 17)         CALL    PRINTHEX
C229-                576
C229-11 A6 C2        577 ( 10)         LD      DE,MSGCRLF
C22C-0E 09           578 (  7)         LD      C,WRSTR
C22E-CD 7A C4        579 ( 17)         CALL    BDOS
C231-C9              580 ( 10)         RET
C232-                581
C232-                582       ;-------------------------------------------------------------------------
C232-                583       ; PRINTHEX - PRINT BYTE IN HEXADECIMAL FORMAT
C232-                584       ; INPUT:
C232-                585       ;       A - BYTE TO PRINT
C232-                586       ; OUTPUT:
C232-                587       ;       NONE
C232-                588       ;-------------------------------------------------------------------------
C232-                589       PRINTHEX:
C232-C5              590 ( 11)         PUSH    BC
C233-D5              591 ( 11)         PUSH    DE
C234-E5              592 ( 11)         PUSH    HL
C235-F5              593 ( 11)         PUSH    AF                      ; SAVE PRINTED VALUE ON THE STACK
C236-0F              594 (  4)         RRCA                            ; ROTATE HIGHER 4 BITS TO LOWER 4 BITS
C237-0F              595 (  4)         RRCA
C238-0F              596 (  4)         RRCA
C239-0F              597 (  4)         RRCA
C23A-CD 47 C2        598 ( 17)         CALL    PRINTDIGIT      ; PRINT HIGHER 4 BITS
C23D-F1              599 ( 10)         POP     AF                              ; RESTORE PRINTED VALUE
C23E-F5              600 ( 11)         PUSH    AF                      ; PUSH IT TO THE STACK AGAIN
C23F-CD 47 C2        601 ( 17)         CALL    PRINTDIGIT      ; PRINT LOWER 4 BITS
C242-F1              602 ( 10)         POP     AF
C243-E1              603 ( 10)         POP     HL
C244-D1              604 ( 10)         POP     DE
C245-C1              605 ( 10)         POP     BC
C246-C9              606 ( 10)         RET
C247-                607
C247-                608       ;-------------------------------------------------------------------------
C247-                609       ; PRINTDIGIT - PRINT DIGIT IN HEXADECIMAL FORMAT
C247-                610       ; INPUT:
C247-                611       ;       A - DIGIT TO PRINT, LOWER 4 BITS
C247-                612       ; OUTPUT:
C247-                613       ;       NONE
C247-                614       ; TRASHES REGISTERS A, FLAGS, BC, DE, HL
C247-                615       ;-------------------------------------------------------------------------
C247-                616       PRINTDIGIT:
C247-E6 0F           617 (  7)         AND     0FH             ; ISOLATE LOWER 4 BITS
C249-C6 30           618 (  7)         ADD     A,'0'           ; CONVERT TO ASCII
C24B-FE 3A           619 (  7)         CP      ':'             ; GREATER THAN '9'?
C24D-38 02           620 ( 7+)         JR      C,PRINTIT
C24F-C6 07           621 (  7)         ADD     A,7             ; CONVERT A-F TO ASCII
C251-                622
C251-                623       PRINTIT:
C251-5F              624 (  4)         LD      E,A
C252-0E 02           625 (  7)         LD      C,WRCHR
C254-CD 7A C4        626 ( 17)         CALL    BDOS
C257-C9              627 ( 10)         RET
C258-                628
C258-                629       ;-------------------------------------------------------------------------
C258-                630       ; PRINTSTR - Print string
C258-                631       ; INPUT:
C258-                632       ;       D - address of the string to print
C258-                633       ; OUTPUT:
C258-                634       ;       None
C258-                635       ; Note: String must be terminated with a dollar sign
C258-                636       ;-------------------------------------------------------------------------
C258-                637       PRINTSTR:
C258-F5              638 ( 11)         PUSH    AF
C259-C5              639 ( 11)         PUSH    BC
C25A-D5              640 ( 11)         PUSH    DE
C25B-E5              641 ( 11)         PUSH    HL
C25C-0E 09           642 (  7)         LD              C,WRSTR
C25E-CD 7A C4        643 ( 17)         CALL    BDOS
C261-E1              644 ( 10)         POP             HL
C262-D1              645 ( 10)         POP             DE
C263-C1              646 ( 10)         POP             BC
C264-F1              647 ( 10)         POP             AF
C265-C9              648 ( 10)         RET
C266-                649
C266-00              650       DEBUG           .DB     0
C267-00              651       ISCMOS          .DB     0
C268-00              652       ISU880          .DB     0
C269-00              653       XYRESULT        .DB     0
C26A-00 00 00 00     654       XFYFCOUNT       .DB     0,0,0,0
C26E-00 00           655       XFCOUNT         .DW     0
C270-00 00           656       YFCOUNT         .DW     0
C272-5A 38 30 20 
     50 72 6F 63 
     65 73 73 6F 
     72 20 54 79 
     70 65 20 44 
     65 74 65 63 
     74 69 6F 6E 
     20 28 43 29 
     20 32 30 32 
     34 20 53 65 
     72 67 65 79 
     20 4B 69 73 
     65 6C 65 76     657       MSGSIGNIN       .DB     'Z80 Processor Type Detection (C) 2024 Sergey Kiselev'
C2A6-0D 0A 00        658       MSGCRLF         .DB     CR,LF,EOS
C2A9-                659       ;MSGUSAGE       .DB     'Invalid argument. Usage: z80type [/D]',0DH,0AH,EOS
C2A9-52 61 77 20 
     72 65 73 75 
     6C 74 73 3A 
     20 20 20 20 
     20 20 20 43 
     4D 4F 53 3A 
     20 00           660       MSGRAWCMOS      .DB     'Raw results:       CMOS: ',EOS
C2C3-58 46 2F 59 
     46 20 66 6C 
     61 67 73 20 
     74 65 73 74 
     3A 20 20 00     661       MSGFLAGS        .DB     'XF/YF flags test:  ',EOS
C2D7-20 55 38 38 
     30 3A 20 00     662       MSGRAWU880      .DB     ' U880: ',EOS
C2DF-20 58 46 2F 
     59 46 3A 20 
     00              663       MSGRAWXY        .DB     ' XF/YF: ',EOS
C2E8-44 65 74 65 
     63 74 65 64 
     20 43 50 55 
     20 74 79 70 
     65 3A 20 00     664       MSGCPUTYPE      .DB     'Detected CPU type: ',EOS
C2FC-4E 65 77 65 
     72 20 4D 4D 
     45 20 55 38 
     38 30 2C 20 
     54 68 65 73 
     79 73 20 5A 
     38 30 2C 20 
     4D 69 63 72 
     6F 65 6C 65 
     63 74 72 6F 
     6E 69 63 61 
     20 4D 4D 4E 
     20 38 30 43 
     50 55 00        665       MSGU880NEW      .DB     'Newer MME U880, Thesys Z80, Microelectronica MMN 80CPU',EOS
C333-4F 6C 64 65 
     72 20 4D 4D 
     45 20 55 38 
     38 30 00        666       MSGU880OLD      .DB     'Older MME U880',EOS
C342-53 68 61 72 
     70 20 4C 48 
     35 30 38 30 
     41 00           667       MSGSHARPLH5080A .DB     'Sharp LH5080A',EOS
C350-5A 69 6C 6F 
     67 20 5A 38 
     30 2C 20 5A 
     69 6C 6F 67 
     20 5A 30 38 
     34 30 30 20 
     6F 72 20 73 
     69 6D 69 6C 
     61 72 20 4E 
     4D 4F 53 20 
     43 50 55 0D 
     0A              668       MSGNMOSZ80      .DB     'Zilog Z80, Zilog Z08400 or similar NMOS CPU',CR,LF
C37D-20 20 20 20 
     20 20 20 20 
     20 20 20 20 
     20 20 20 20 
     20 20 20        669                       .DB      '                   '
C390-4D 6F 73 74 
     65 6B 20 4D 
     4B 33 38 38 
     30 4E 2C 20 
     53 47 53 2F 
     53 54 20 5A 
     38 34 30 30 
     2C 20 53 68 
     61 72 70 20 
     4C 48 30 30 
     38 30 41 2C 
     20 4B 52 31 
     38 35 38 56 
     4D 31 00        670                       .DB     'Mostek MK3880N, SGS/ST Z8400, Sharp LH0080A, KR1858VM1',EOS
C3C7-4E 45 43 20 
     44 37 38 30 
     43 2C 20 47 
     6F 6C 64 53 
     74 61 72 20 
     5A 38 34 30 
     30 2C 20 70 
     6F 73 73 69 
     62 6C 79 20 
     4B 52 31 38 
     35 38 56 4D 
     31 00           671       MSGNECD780C     .DB     'NEC D780C, GoldStar Z8400, possibly KR1858VM1',EOS
C3F5-4F 76 65 72 
     63 6C 6F 63 
     6B 65 64 20 
     4B 52 31 38 
     35 38 56 4D 
     31 00           672       MSGKR1858VM1    .DB     'Overclocked KR1858VM1',EOS
C40B-55 6E 6B 6E 
     6F 77 6E 20 
     4E 4D 4F 53 
     20 5A 38 30 
     20 63 6C 6F 
     6E 65 00        673       MSGNMOSUNKNOWN  .DB     'Unknown NMOS Z80 clone',EOS
C422-5A 69 6C 6F 
     67 20 5A 38 
     34 43 30 30 
     00              674       MSGCMOSZ80      .DB     'Zilog Z84C00',EOS
C42F-54 6F 73 68 
     69 62 61 20 
     54 4D 50 5A 
     38 34 43 30 
     30 41 50 2C 
     20 53 54 20 
     5A 38 34 43 
     30 30 41 42 
     00              675       MSGTOSHIBA      .DB     'Toshiba TMPZ84C00AP, ST Z84C00AB',EOS
C450-4E 45 43 20 
     44 37 30 30 
     30 38 41 43 
     00              676       MSGNECD70008AC  .DB     'NEC D70008AC',EOS
C45D-55 6E 6B 6E 
     6F 77 6E 20 
     43 4D 4F 53 
     20 5A 38 30 
     20 63 6C 6F 
     6E 65 00        677       MSGCMOSUNKNOWN  .DB     'Unknown CMOS Z80 clone',EOS
C474-44 6F 6E 65 
     2E 00           678       MSDONE: .DB     'Done.',EOS
C47A-                679
C47A-                680       ;------------------------------------------------------------------------------
C47A-                681       ;---
C47A-                682       ;--- BDOS SUBSTITUTE subroutine
C47A-                683       ;---
C47A-                684       ;------------------------------------------------------------------------------
C47A-                685       BDOS:
C47A-C5              686 ( 11)         PUSH    BC
C47B-D5              687 ( 11)         PUSH    DE
C47C-E5              688 ( 11)         PUSH    HL
C47D-F5              689 ( 11)         PUSH    AF
C47E-79              690 (  4)         LD              A,C
C47F-FE 09           691 (  7)         CP              WRSTR
C481-28 0A           692 ( 7+)         JR              Z,STRING        ; PRINT STRING
C483-FE 02           693 (  7)         CP              WRCHR
C485-20 0D           694 ( 7+)         JR              NZ,EXIT ; WRONG VALUE
C487-7B              695 (  4)         LD              A,E                     ; PRINT CHAR
C488-CD A3 C4        696 ( 17)         CALL    PUTC
C48B-18 07           697 ( 12)         JR              EXIT
C48D-                698       STRING:
C48D-EB              699 (  4)         EX              DE,HL
C48E-CD 99 C4        700 ( 17)         CALL    PUTS
C491-CD F2 C4        701 ( 17)         CALL    FLUSH_TX
C494-                702       EXIT:
C494-F1              703 ( 10)         POP             AF
C495-E1              704 ( 10)         POP             HL
C496-D1              705 ( 10)         POP             DE
C497-C1              706 ( 10)         POP             BC
C498-C9              707 ( 10)         RET
C499-                708
C499-                709       ;------------------------------------------------------------------------------
C499-                710       ;---
C499-                711       ;--- String subroutine
C499-                712       ;---
C499-                713       ;------------------------------------------------------------------------------
C499-                714
C499-                715       ;
C499-                716       ; Send a string to the serial line, HL contains the pointer to the string:
C499-                717       ;
C499-7E              718 (  7) PUTS:       LD          A,(HL)
C49A-FE 00           719 (  7)             CP          EOS             ; End of string reached?
C49C-C8              720 ( 5+)             RET         Z                               ; Yes
C49D-CD A3 C4        721 ( 17)             CALL        PUTC
C4A0-23              722 (  6)             INC         HL              ; Increment character pointer
C4A1-18 F6           723 ( 12)             JR          PUTS                ; Transmit next character
C4A3-                724
C4A3-                725       ;------------------------------------------------------------------------------
C4A3-                726       ;---
C4A3-                727       ;--- I/O subroutines
C4A3-                728       ;---
C4A3-                729       ;------------------------------------------------------------------------------
C4A3-                730
C4A3-                731       ;
C4A3-                732       ; Send a single character to the serial line (A contains the character):
C4A3-                733       ;
C4A3-                734       PUTC:
C4A3-32 47 C5        735 ( 13)                 LD      (SAVE_CHAR),A   ; instead of PUSH AF
C4A6-CD D6 C4        736 ( 17)                 CALL    CHECK_TX        ; try to send char from buffer
C4A9-CD 0A C5        737 ( 17)                 CALL    write_buffer    ; put new char in buffer
C4AC-C9              738 ( 10)                 RET
C4AD-                739       ;
C4AD-                740       ; Wait for a single incoming character on the serial line
C4AD-                741       ; and read it, result is in A:
C4AD-                742       ;
C4AD-                743       GETC:
C4AD-CD D6 C4        744 ( 17)                 CALL    CHECK_TX        ; try to send char from buffer
C4B0-CD CC C4        745 ( 17)                 CALL    READ_CHAR       ; is new char?
C4B3-D8              746 ( 5+)                 RET     C               ; in A new char
C4B4-18 F7           747 ( 12)                 JR      GETC            ; repeat if not
C4B6-                748
C4B6-                749       ;*************************************************************************
C4B6-                750       ;*              Z80 SIO INIT                                             *
C4B6-                751       ;*************************************************************************
C4B6-                752       SIO_INIT:
C4B6-0E 86           753 (  7)                                 LD C,CHA_CNTR       ;INIT CHANNEL A
C4B8-CD BD C4        754 ( 17)                                 CALL SIO_INI
C4BB-0E 87           755 (  7)                                 LD C,CHB_CNTR       ;INIT CHANNEL B
C4BD-                756       SIO_INI:
C4BD-06 07           757 (  7)                                 LD B,7              ;LENGHT OF SIO_INIT_TABLE
C4BF-21 C5 C4        758 ( 10)                                 LD HL,SIO_INIT_TABLE
C4C2-ED B3           759 (16+)                                 OTIR                ;WRITE TO ALL REGS
C4C4-C9              760 ( 10)                                 RET
C4C5-                761
C4C5-                762       SIO_INIT_TABLE:
C4C5-18              763           .DB 18h             ;RESET CHANNEL
C4C6-04              764           .DB 04h             ;REG4
C4C7-C4              765           .DB 0C4H            ;x64 clock, 1 stop bit, no parity (7,3728MHz -> 115200 baud)
C4C8-03              766           .DB 03H             ;REG3
C4C9-C1              767           .DB 0C1H            ;Set receive config to 8 bits, RX ENABLE
C4CA-05              768           .DB 05h             ;REG5
C4CB-68              769           .DB 68h             ;Transmitter configuration set to 8 bits, TX ENABLE
C4CC-                770
C4CC-                771
C4CC-                772       ;*************************************************************************
C4CC-                773       ;*              Z80 SIO READ CHAR                                        *
C4CC-                774       ;*************************************************************************
C4CC-                775       READ_CHAR:
C4CC-AF              776 (  4)                                 XOR A
C4CD-D3 87           777 ( 11)                                 OUT (CHB_CNTR),A    ;TEST RX
C4CF-DB 87           778 ( 11)                                 IN A,(CHB_CNTR)     ;READ REG0
C4D1-1F              779 (  4)                                 RRA                 ;RX CHAR AVAILABLE -> CY
C4D2-D0              780 ( 5+)                                 RET NC              ;RX NOT AVAILABLE
C4D3-DB 85           781 ( 11)                                 IN A,(CHB_DATA)     ;READ CHAR
C4D5-C9              782 ( 10)                                 RET                 ;IF CY=1 A=NEW CHAR
C4D6-                783
C4D6-                784       ;*************************************************************************
C4D6-                785       ;*              Z80 SIO SEND CHAR (IF ANY)                               *
C4D6-                786       ;*************************************************************************
C4D6-                787       CHECK_TX:
C4D6-AF              788 (  4)                                 XOR     A
C4D7-D3 87           789 ( 11)                                 OUT     (CHB_CNTR),A    ;TEST RX
C4D9-DB 87           790 ( 11)                                 IN      A,(CHB_CNTR)    ;READ REG0
C4DB-CB 57           791 (  8)                                 BIT     2,A             ;TEST TRANSMIT BUFFER EMPTY
C4DD-C8              792 ( 5+)                                 RET         Z               ; return if Tx not ready
C4DE-CD 1D C5        793 ( 17)                                 CALL    read_buffer
C4E1-B7              794 (  4)                                 OR      A
C4E2-C8              795 ( 5+)                                 RET     Z               ; return if buffer is empty
C4E3-D3 85           796 ( 11)                                 OUT         (CHB_DATA),A    ; send char
C4E5-C9              797 ( 10)                                 RET
C4E6-                798
C4E6-                799       ;*************************************************************************
C4E6-                800       ; Z80 Ring Buffer with Empty/Full Check Example
C4E6-                801       ;*************************************************************************
C4E6-                802
C4E6-                803       ; Constants
00FB-                804       BUFFER_START .equ 0FBH   ; Start address of the buffer in memory
C4E6-                805
C4E6-                806       ; Buffer initialization
C4E6-                807       init_buffer:
C4E6-AF              808 (  4)                                 XOR     A            ; Initialize the write and read pointers
C4E7-DD 21 45 C5     809 ( 14)                                 LD      IX,write_ptr
C4EB-DD 77 00        810 ( 19)                                 LD      (IX+0),A      ; write_ptr
C4EE-DD 77 01        811 ( 19)                                 LD      (IX+1),A      ; read_ptr
C4F1-C9              812 ( 10)                                 RET
C4F2-                813
C4F2-                814       FLUSH_TX:
C4F2-CD FB C4        815 ( 17)                                 CALL    is_buffer_empty
C4F5-C8              816 ( 5+)                                 RET     Z               ; return if buffer is empty
C4F6-CD D6 C4        817 ( 17)                                 CALL    CHECK_TX        ; try to send char from buffer
C4F9-18 F7           818 ( 12)                                 JR      FLUSH_TX        ; repeat
C4FB-                819
C4FB-                820       ; Check if the buffer is empty
C4FB-                821       is_buffer_empty:
C4FB-DD 7E 00        822 ( 19)                                 LD      A,(IX+0)      ; write_ptr
C4FE-DD BE 01        823 ( 19)                                 CP      (IX+1)        ; read_ptr
C501-C9              824 ( 10)                                 RET                   ; Zero flag is set if buffer is empty
C502-                825
C502-                826       ; Check if the buffer is full
C502-                827       is_buffer_full:
C502-DD 7E 00        828 ( 19)                                 LD      A,(IX+0)      ; Get the current write pointer
C505-3C              829 (  4)                                 INC     A             ; Move to the next position
C506-DD BE 01        830 ( 19)                                 CP      (IX+1)        ; read_ptr
C509-C9              831 ( 10)                                 RET                   ; Zero flag is set if buffer is full
C50A-                832
C50A-                833       ; Write data to the buffer with full check
C50A-                834       write_buffer:
C50A-CD 02 C5        835 ( 17)                                 CALL    is_buffer_full ; Check if the buffer is full
C50D-C8              836 ( 5+)                                 RET     Z           ; buffer_full   ; If the Zero flag is set, the buffer is full
C50E-                837
C50E-                838           ; Write data (assuming SAVE_CHAR holds the data to write)
C50E-E5              839 ( 11)                                 PUSH    HL
C50F-26 FB           840 (  7)                                 ld      H, BUFFER_START
C511-DD 6E 00        841 ( 19)                                 LD      L,(IX+0)        ; Get the current write pointer
C514-3A 47 C5        842 ( 13)                                 LD      A,(SAVE_CHAR)   ; put new char in buffer
C517-77              843 (  7)                                 ld      (hl), a         ; Write the data
C518-E1              844 ( 10)                                 POP     HL
C519-                845           ; Increment the write pointer
C519-DD 34 00        846 ( 23)                                 INC     (IX+0)          ; Move to the next position
C51C-C9              847 ( 10)                                 RET
C51D-                848
C51D-                849       buffer_full:
C51D-                850           ; Handle the error case (e.g., return without writing)
C51D-                851           ;ret
C51D-                852
C51D-                853       ; Read data from the buffer with empty check
C51D-                854       read_buffer:
C51D-CD FB C4        855 ( 17)                                 CALL    is_buffer_empty     ; Check if the buffer is empty
C520-28 0C           856 ( 7+)                                 JR      Z, buffer_empty     ; If the Zero flag is set, the buffer is empty
C522-                857
C522-                858           ; Read data
C522-E5              859 ( 11)                                 PUSH    HL
C523-26 FB           860 (  7)                                 LD      H, BUFFER_START
C525-DD 6E 01        861 ( 19)                                 LD      L,(IX+1)            ; Get the current read pointer
C528-7E              862 (  7)                                 LD      A,(hl)              ; Read the data
C529-E1              863 ( 10)                                 POP     HL
C52A-                864           ; Increment the read pointer
C52A-DD 34 01        865 ( 23)                                 INC     (IX+1)              ; Move to the next position
C52D-C9              866 ( 10)                                 RET
C52E-                867
C52E-                868       buffer_empty:
C52E-                869           ; Handle the empty case (e.g., return without reading)
C52E-AF              870 (  4)                                 XOR     A
C52F-C9              871 ( 10)                                 RET
C530-                872
C530-                873          ;################################################
C530-                874          ;##   po ostatnim bajcie naszego programu wpisujemy 2 x AAAA
C530-                875          ;.db 0AAh, 0AAh, 0AAh, 0AAh ; po tym markerze /2x AAAA/ nazwa programu
C530-                876          ;################################################
C530-AA AA AA AA     877        .db 0AAh, 0AAh, 0AAh, 0AAh ; marker nazwy
C534-5A 38 30 20 
     43 50 55 20 
     74 65 73 74 
     20 53 49 4F     878        .db "Z80 CPU test SIO"       ; nazwa programu, max 16 znaków /dla LCD 4x 20 znakow w linii/
C544-FF              879        .db 0FFH                   ; koniec tekstu
C545-                880
C545-                881       ; Variables
C545-00              882       write_ptr:      .db 0      ; Write pointer (offset from BUFFER_START)
C546-00              883       read_ptr:       .db 0      ; Read pointer (offset from BUFFER_START)
C547-FF              884       SAVE_CHAR:              .DB 0FFH
C548-                885       ; koniec zabawy. :-)
C548-                886
C548-                887               .END
