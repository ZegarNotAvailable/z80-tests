0000-                 24               .sf Z80testCA80.sym
0000-                 25       ;        .in ca80.inc
0000-                 26       ;*********************************************************************
0000-                 27               .sm code           ;
C000-                 28               .or $C000          ; RAM IN ALL OF CA80
C000-                 29       ;**************************************************************************
00E4-                 30       DATA_8251    .EQ 0E4H    ;Data register 8251A                             *
00E5-                 31       CONTR_8251   .EQ 0E5H    ;Control register 8251A                          *
00E3-                 32       CONTR_8255   .EQ 0E3H    ;Control register 8255                           *
C000-                 33       ;**************************************************************************
C000-                 34
C000-                 35       ;BDOS   EQU     5
C000-                 36       ;WRCHR  EQU     2
C000-                 37       ;WRSTR  EQU     9
C000-                 38       ; SIO CHANNEL B COMMAND PORT - RC2014/SC DEFAULT
C000-                 39       ;
C000-                 40       ; Costants definitions
C000-                 41       ;
0000-                 42       eos             .equ    $00             ; End of string
000D-                 43       cr              .equ    $0d             ; Carriage return
000A-                 44       lf              .equ    $0a             ; Line feed
0020-                 45       space           .equ    $20             ; Space
00E0-                 46       SIOBC           .EQ     0E0H            ; PA2 (Intel 8255) CA80
C000-                 47       ;
C000-                 48       ;
C000-CD 58 C2         49 ( 17)                 CALL    INIT_8255       ; PA INSTEAD SIOBC
C003-CD 5D C2         50 ( 17)                 CALL    INIT_8251       ; UART INSTEAD BDOS
C006-CD 7D C2         51 ( 17)                 CALL    INIT_BUFFER     ; CIRCULAR BUFFER FOR UART
C009-                 52
C009-                 53       ;       ORG     0100H
C009-                 54
C009-11 27 C1         55 ( 10)         LD      DE,MSGSIGNIN
C00C-                 56       ;       MVI     C,WRSTR
C00C-CD 2E C2         57 ( 17)         CALL    WRSTR                       ; CALL  BDOS
C00F-                 58
C00F-                 59       ; CHECK FOR U880
C00F-                 60
C00F-21 FF FF         61 ( 10)         LD      HL,0FFFFH
C012-01 E0 01         62 ( 10)         LD      BC,00100H+SIOBC ; USE SIO CHANNEL B COMMAND PORT FOR TESTS
C015-                 63
C015-                 64               ; DI
C015-                 65               ; MVI   A,02H           ; SET SIO CHANNEL B REGISTER POINTER
C015-                 66               ;                       ; TO REGISTER 2 - INTERRUPT VECTOR REGISTER
C015-                 67               ; OUT   SIOBC
C015-                 68               ;IN     A,(SIOBC)               ; READ THE CURRENT INTERRUPT VECTOR
C015-37               69 (  4)         SCF
C016-ED A3            70               .DB     0EDH,0A3H       ; Z80 OUTI INSTRUCTION
C018-                 71               ;PUSH   AF              ; SAVE THE ORIGINAL VECTOR ON THE STACK
C018-                 72               ; MVI   A,02H           ; SET SIO CHANNEL B REGISTER POINTER
C018-                 73               ;                       ; TO REGISTER 2 - INTERRUPT VECTOR REGISTER
C018-                 74               ;OUT    (SIOBC),A
C018-                 75               ;POP    AF              ; RESTORE THE ORIGINAL INTERRUPT VECTOR
C018-                 76               ;OUT    (SIOBC),A               ; WRITE IT TO THE SIO
C018-                 77               ; EI
C018-30 0D            78 ( 7+)         JR  NC,Z80
C01A-                 79
C01A-                 80       ; U880 DETECTED
C01A-                 81
C01A-21 26 C1         82 ( 10)         LD      HL,ISMME
C01D-36 01            83 ( 10)         LD      (HL),1          ; SET MANUFACTURER MME FLAG
C01F-11 A9 C1         84 ( 10)         LD      DE,MSGU880
C022-                 85               ;MVI    C,WRSTR
C022-CD 2E C2         86 ( 17)         CALL    WRSTR                       ; CALL  BDOS
C025-18 06            87 ( 12)         JR      CHKCMOS
C027-                 88
C027-                 89       Z80:
C027-11 B0 C1         90 ( 10)         LD      DE,MSGZ80
C02A-                 91               ;MVI    C,WRSTR
C02A-CD 2E C2         92 ( 17)         CALL    WRSTR                       ; CALL  BDOS
C02D-                 93
C02D-                 94       CHKCMOS:
C02D-11 70 C1         95 ( 10)         LD      DE,MSGFAMILY
C030-                 96               ;MVI    C,WRSTR
C030-CD 2E C2         97 ( 17)         CALL    WRSTR                       ; CALL  BDOS
C033-                 98       ; NMOS/CMOS CPU DETECTION ALGORITHM:
C033-                 99       ; 1. DISABLE INTERRUPTS
C033-                100       ; 2. READ AND SAVE SIO CHANNEL B INTERRUPT VECTOR
C033-                101       ; 3. MODIFY SIO CHANNEL B INTERRUPT VECTOR USING OUT (C),<0|0FFH>
C033-                102       ;    (DB 0EDH, 071H) UNDOCMENTED INSTRUCTION:
C033-                103       ;      ON AN NMOS CPU: OUT (C),0
C033-                104       ;      ON A CMOS CPU: OUT (C),0FFH
C033-                105       ; 4. READ AND SAVE SIO CHANNEL B INTERRUPT VECTOR
C033-                106       ; 5. RESTORE SIO CHANNEL B INTERRUPT VECTOR
C033-                107       ; 6. SET SIO REGISTER POINTER TO 0
C033-                108       ; 7. ENABLE INTERRUPTS
C033-                109       ; 8. CHECK THE VALUE READ BACK IN STEP 4
C033-                110       ;      0 - NMOS CPU
C033-                111       ;      0FFH - CMOS CPU
C033-                112               ; DI
C033-                113               ; MVI   A,02H           ; SET SIO CHANNEL B REGISTER POINTER
C033-                114               ;                       ; TO REGISTER 2 - INTERRUPT VECTOR REGISTER
C033-                115               ; OUT   SIOBC
C033-                116               ; IN    A,(SIOBC)               ; READ THE CURRENT INTERRUPT VECTOR
C033-                117               ; LD    B,A             ; SAVE THE ORIGINAL VECTOR TO REGISTER B
C033-0E E0           118 (  7)         LD      C,SIOBC
C035-ED 71           119               .DB     0EDH, 071H      ; UNDOCUMENTED OUT (C),<0|0FFH> INSTRUCTION
C037-                120                                       ; WRITE 0 OR FF TO THE SIO INTERRUPT VECTOR
C037-                121               ; MVI   A,02H           ; SET SIO CHANNEL B REGISTER POINTER
C037-                122               ;                       ; TO REGISTER 2 - INTERRUPT VECTOR REGISTER
C037-                123               ; OUT   (SIOBC),A
C037-DB E0           124 ( 11)         IN      A,(SIOBC)               ; READ THE NEW INTERRUPT VECTOR
C039-                125               ;LD     C,A             ; SAVE THE NEW VECTOR TO REGISTER B
C039-                126               ; MVI   A,02H           ; SET SIO CHANNEL B REGISTER POINTER
C039-                127               ;                       ; TO REGISTER 2 - INTERRUPT VECTOR REGISTER
C039-                128               ; OUT   (SIOBC),A
C039-                129               ; LD    A,B             ; RESTORE THE ORIGINAL INTERRUPT VECTOR
C039-                130               ; OUT   (SIOBC),A               ; WRITE IT TO THE SIO
C039-                131               ;EI
C039-                132               ;LD     A,C             ; VALUE WRITTEN BY OUT (C),<0|0FFH> INSTRUCTION
C039-FE 00           133 (  7)         CP      00H             ; IS IT ZERO?
C03B-20 24           134 ( 7+)         JR  NZ,CMOS
C03D-                135
C03D-                136       ; NMOS DETECTED
C03D-                137
C03D-11 B6 C1        138 ( 10)         LD      DE,MSGNMOS
C040-                139               ;MVI    C,WRSTR
C040-CD 2E C2        140 ( 17)         CALL    WRSTR                       ; CALL  BDOS
C043-                141
C043-                142       ; CHECK MANUFACTURER FOR NMOS CPUS
C043-                143
C043-11 83 C1        144 ( 10)         LD      DE,MSGVENDOR
C046-                145               ;MVI    C,WRSTR
C046-CD 2E C2        146 ( 17)         CALL    WRSTR                       ; CALL  BDOS
C049-                147
C049-                148       ; CHECK IF THE MANUFACTURER IS MME
C049-                149
C049-21 26 C1        150 ( 10)         LD      HL,ISMME
C04C-7E              151 (  7)         LD      A,(HL)
C04D-FE 01           152 (  7)         CP      1
C04F-20 08           153 ( 7+)         JR  NZ,NOTMME
C051-                154
C051-11 C4 C1        155 ( 10)         LD      DE,MSGMME
C054-                156               ;MVI    C,WRSTR
C054-CD 2E C2        157 ( 17)         CALL    WRSTR                       ; CALL  BDOS
C057-18 47           158 ( 12)         JR      DONE
C059-                159
C059-                160       NOTMME:
C059-11 D4 C1        161 ( 10)         LD      DE,MSGNOTMME
C05C-                162               ;MVI    C,WRSTR
C05C-CD 2E C2        163 ( 17)         CALL    WRSTR                       ; CALL  BDOS
C05F-18 06           164 ( 12)         JR      MANUFACTURER    ; DONE !!! CHANGED FOR TOSHIBA
C061-                165
C061-                166       CMOS:
C061-                167
C061-11 BD C1        168 ( 10)         LD      DE,MSGCMOS
C064-                169               ;MVI    C,WRSTR
C064-CD 2E C2        170 ( 17)         CALL    WRSTR                       ; CALL  BDOS
C067-                171
C067-                172       ; CHECK MANUFACTURER FOR CMOS CPUS
C067-                173       MANUFACTURER:
C067-11 83 C1        174 ( 10)         LD      DE,MSGVENDOR
C06A-                175               ;MVI    C,WRSTR
C06A-CD 2E C2        176 ( 17)         CALL    WRSTR                       ; CALL  BDOS
C06D-                177
C06D-                178       ; TEST SCF (STC) WHEN PREVIOUS INSTRUCTION DOESN'T MODIFY FLAGS
C06D-                179       ; POP AF (POP PSW) IS NOT TREATED AS FLAG MODIFYING INSTRUCTION
C06D-                180
C06D-11 00 28        181 ( 10)         LD      DE,2800H                ; SET 'A' REGISTER BITS 3 AND 5
C070-CD E2 C0        182 ( 17)         CALL    TESTSCF
C073-FE 29           183 (  7)         CP      29H             ; FLAGS ON ZILOG CPU
C075-28 13           184 ( 7+)         JR  Z,ZILOG
C077-FE 09           185 (  7)         CP      09H             ; FLAGS ON TOSHIBA (AND SOME NEC?) CPUS
C079-28 17           186 ( 7+)         JR  Z,TOSHIBA
C07B-FE 01           187 (  7)         CP      01H             ; FLAGS ON NEC CPU
C07D-28 1B           188 ( 7+)         JR  Z,NEC
C07F-                189
C07F-                190       ; UNRECOGNIZED CPU
C07F-                191
C07F-CD F3 C0        192 ( 17)         CALL    PRINTHEX        ; PRINT FLAGS
C082-                193
C082-11 23 C2        194 ( 10)         LD      DE,MSGUNKNOWN
C085-                195               ;MVI    C,WRSTR
C085-CD 2E C2        196 ( 17)         CALL    WRSTR                       ; CALL  BDOS
C088-18 16           197 ( 12)         JR      DONE
C08A-                198
C08A-                199       ZILOG:
C08A-11 F4 C1        200 ( 10)         LD      DE,MSGZILOG
C08D-                201               ;MVI    C,WRSTR
C08D-CD 2E C2        202 ( 17)         CALL    WRSTR                       ; CALL  BDOS
C090-18 0E           203 ( 12)         JR      DONE
C092-                204
C092-                205       TOSHIBA:
C092-11 06 C2        206 ( 10)         LD      DE,MSGTOSHIBA
C095-                207               ;MVI    C,WRSTR
C095-CD 2E C2        208 ( 17)         CALL    WRSTR                       ; CALL  BDOS
C098-18 06           209 ( 12)         JR      DONE
C09A-                210
C09A-                211       NEC:
C09A-11 1D C2        212 ( 10)         LD      DE,MSGNEC
C09D-                213               ;MVI    C,WRSTR
C09D-CD 2E C2        214 ( 17)         CALL    WRSTR                       ; CALL  BDOS
C0A0-                215
C0A0-                216       DONE:
C0A0-CD A7 C0        217 ( 17)         CALL    TESTFLAGS       ; TEST HOW FLAGS SCF AFFECTS FLAGS
C0A3-CD 96 C2        218 ( 17)         CALL    FLUSH_TX
C0A6-F7              219 ( 11)     RST     30H         ; MONITOR CA80
C0A7-                220       ;       RET                     ; RETURN TO CP/M
C0A7-                221
C0A7-                222       ;-------------------------------------------------------------------------
C0A7-                223       ; TESTFLAGS - TEST HOW SCF INSTRUCTION AFFECTS YF AND XF FLAGS
C0A7-                224       ; NOTE: YF IS FLAGS.5 AND XF IS FLAGS.3
C0A7-                225       ; INPUT:
C0A7-                226       ;       NONE
C0A7-                227       ; OUTPUT:
C0A7-                228       ;       PRINTED ON CONSOLE
C0A7-                229       ;-------------------------------------------------------------------------
C0A7-                230       TESTFLAGS:
C0A7-11 96 C1        231 ( 10)         LD      DE,MSGFLAGS
C0AA-                232               ;MVI    C,WRSTR
C0AA-CD 2E C2        233 ( 17)         CALL    WRSTR                       ; CALL  BDOS
C0AD-16 00           234 (  7)         LD      D,00H
C0AF-                235       LOOP1:
C0AF-1E 00           236 (  7)         LD      E,00H
C0B1-                237       LOOP2:
C0B1-CD E2 C0        238 ( 17)         CALL    TESTSCF
C0B4-21 16 C1        239 ( 10)         LD      HL,FLAGCOUNT    ; POINT TO FLAG COUNTERS
C0B7-0E 08           240 (  7)         LD      C,8             ; NUMBER OF BITS / FLAGS
C0B9-                241       LOOP3:
C0B9-0F              242 (  4)         RRCA                    ; LOWER BIT TO C
C0BA-30 07           243 ( 7+)         JR  NC,LOOP4
C0BC-                244
C0BC-34              245 ( 11)         INC     (HL)            ; INCREMENT COUNTER IF FLAG IS SET
C0BD-20 04           246 ( 7+)         JR  NZ,LOOP4            ; NO OVERFLOW
C0BF-23              247 (  6)         INC     HL              ; MOVE TO THE HIGH BIT
C0C0-34              248 ( 11)         INC     (HL)            ; INCREMENT HIGHER BIT
C0C1-18 01           249 ( 12)         JR      LOOP5           ; ALREADY INCREMENTED HL BY 1, SKIP NEXT INX H
C0C3-                250       LOOP4:
C0C3-23              251 (  6)         INC     HL              ; MOVE TO THE NEXT COUNTER
C0C4-                252       LOOP5:
C0C4-23              253 (  6)         INC     HL
C0C5-0D              254 (  4)         DEC     C               ; DECREMENT LOOP COUNTER
C0C6-20 F1           255 ( 7+)         JR  NZ,LOOP3            ; LOOP COUNTER NOT ZERO - NEXT BIT
C0C8-1C              256 (  4)         INC     E               ; INCREMENT DE
C0C9-20 E6           257 ( 7+)         JR  NZ,LOOP2
C0CB-14              258 (  4)         INC     D
C0CC-20 E1           259 ( 7+)         JR  NZ,LOOP1
C0CE-                260
C0CE-                261       ; PRINT VALUES
C0CE-0E 10           262 (  7)         LD      C,16            ; 16 DIGITS
C0D0-21 25 C1        263 ( 10)         LD      HL,FLAGCOUNT+15 ; POINT AT THE MSB
C0D3-                264       LOOP6:
C0D3-7E              265 (  7)         LD      A,(HL)
C0D4-CD F3 C0        266 ( 17)         CALL    PRINTHEX
C0D7-2B              267 (  6)         DEC     HL
C0D8-0D              268 (  4)         DEC     C
C0D9-20 F8           269 ( 7+)         JR  NZ,LOOP6            ; PRINT NEXT DIGIT
C0DB-11 2B C2        270 ( 10)         LD      DE,MSGCRLF
C0DE-                271               ;MVI    C,WRSTR
C0DE-CD 2E C2        272 ( 17)         CALL    WRSTR                       ; CALL  BDOS
C0E1-C9              273 ( 10)         RET
C0E2-                274
C0E2-                275       ;-------------------------------------------------------------------------
C0E2-                276       ; TESTSCF - TEST HOW SCF INSTRUCTION AFFECTS YF AND XF FLAGS
C0E2-                277       ; NOTE: YF IS FLAGS.5 AND XF IS FLAGS.3
C0E2-                278       ; INPUT:
C0E2-                279       ;       D - ACCUMULATOR VALUE BEFORE SCF
C0E2-                280       ;       E - FLAGS VALUE BEFORE SCF
C0E2-                281       ; OUTPUT:
C0E2-                282       ;       A.0 - XF FLAG VALUE AFTER SCF
C0E2-                283       ;       A.1 - YF FLAG VALUE AFTER SCF
C0E2-                284       ;-------------------------------------------------------------------------
C0E2-                285       TESTSCF:
C0E2-D5              286 ( 11)         PUSH    DE
C0E3-                287               ;DI
C0E3-3E FE           288 (  7)         LD      A,0FEH
C0E5-A2              289 (  4)         AND     D
C0E6-57              290 (  4)         LD      D,A
C0E7-3E FE           291 (  7)         LD      A,0FEH
C0E9-A3              292 (  4)         AND     E
C0EA-5F              293 (  4)         LD      E,A
C0EB-D5              294 ( 11)         PUSH    DE              ; PUSH DE TO THE STACK
C0EC-F1              295 ( 10)         POP     AF              ; POP A AND FLAGS FROM THE STACK (DE)
C0ED-37              296 (  4)         SCF                     ; SET CF FLAG, DEPENDING ON THE CPU TYPE THIS
C0EE-                297                                       ; ALSO MIGHT CHANGE YF AND XF FLAGS
C0EE-F5              298 ( 11)         PUSH    AF              ; STORE A AND F
C0EF-D1              299 ( 10)         POP     DE              ; NEW FLAGS IN E
C0F0-                300               ;EI
C0F0-                301       ;       XRA     A               ; ZERO A
C0F0-                302       ;       DB      0CBH,5BH        ; BIT 3,E - TEST IF XF IS SET
C0F0-                303       ;       JNZ     TESTYF          ; NOT SET
C0F0-                304       ;       DB      0CBH,0C7H       ; SET 0,A - SET BIT A.0
C0F0-                305       ;TESTYF:
C0F0-                306       ;       DB      0CBH,6BH        ; BIT 5,E - TEST IF YF IS SET
C0F0-                307       ;       JNZ     TESTSCF1
C0F0-                308       ;       DB      0CBH,0CFH       ; SET 1,A - SET BIT A.1
C0F0-                309       ;TESTSCF1:
C0F0-7B              310 (  4)         LD      A,E
C0F1-D1              311 ( 10)         POP     DE
C0F2-C9              312 ( 10)         RET
C0F3-                313
C0F3-                314       ;-------------------------------------------------------------------------
C0F3-                315       ; PRINTHEX - PRINT BYTE IN HEXADECIMAL FORMAT
C0F3-                316       ; INPUT:
C0F3-                317       ;       A - BYTE TO PRINT
C0F3-                318       ; OUTPUT:
C0F3-                319       ;       NONE
C0F3-                320       ;-------------------------------------------------------------------------
C0F3-                321       PRINTHEX:
C0F3-C5              322 ( 11)         PUSH    BC
C0F4-D5              323 ( 11)         PUSH    DE
C0F5-E5              324 ( 11)         PUSH    HL
C0F6-F5              325 ( 11)         PUSH    AF              ; SAVE PRINTED VALUE ON THE STACK
C0F7-0F              326 (  4)         RRCA                    ; ROTATE HIGHER 4 BITS TO LOWER 4 BITS
C0F8-0F              327 (  4)         RRCA
C0F9-0F              328 (  4)         RRCA
C0FA-0F              329 (  4)         RRCA
C0FB-CD 08 C1        330 ( 17)         CALL    PRINTDIGIT      ; PRINT HIGHER 4 BITS
C0FE-F1              331 ( 10)         POP         AF          ; RESTORE PRINTED VALUE
C0FF-F5              332 ( 11)         PUSH    AF              ; PUSH IT TO THE STACK AGAIN
C100-CD 08 C1        333 ( 17)         CALL    PRINTDIGIT      ; PRINT LOWER 4 BITS
C103-F1              334 ( 10)         POP     AF
C104-E1              335 ( 10)         POP     HL
C105-D1              336 ( 10)         POP     DE
C106-C1              337 ( 10)         POP     BC
C107-C9              338 ( 10)         RET
C108-                339
C108-                340       ;-------------------------------------------------------------------------
C108-                341       ; PRINTDIGIT - PRINT DIGIT IN HEXADECIMAL FORMAT
C108-                342       ; INPUT:
C108-                343       ;       A - DIGIT TO PRINT, LOWER 4 BITS
C108-                344       ; OUTPUT:
C108-                345       ;       NONE
C108-                346       ; TRASHES REGISTERS A, FLAGS, BC, DE, HL
C108-                347       ;-------------------------------------------------------------------------
C108-                348       PRINTDIGIT:
C108-E6 0F           349 (  7)         AND     0FH             ; ISOLATE LOWER 4 BITS
C10A-C6 30           350 (  7)         ADD     '0'             ; CONVERT TO ASCII
C10C-FE 3A           351 (  7)         CP      ':'             ; GREATER THAN '9'?
C10E-38 02           352 ( 7+)         JR  C,PRINTIT
C110-C6 07           353 (  7)         ADD     7       ; CONVERT A-F TO ASCII
C112-                354
C112-                355       PRINTIT:
C112-                356               ;LD     E,A
C112-                357               ;MVI    C,WRCHR
C112-CD 45 C2        358 ( 17)         CALL    putc                       ; CALL  BDOS
C115-C9              359 ( 10)         RET
C116-                360
C116-00 00 00 00 
     00 00 00 00 
     00 00 00 00 
     00 00 00 00     361       FLAGCOUNT:      .DW     0,0,0,0,0,0,0,0
C126-00              362       ISMME:          .DB     0
C127-5A 38 30 20 
     50 72 6F 63 
     65 73 73 6F 
     72 20 54 79 
     70 65 20 44 
     65 74 65 63 
     74 69 6F 6E 
     20 28 43 29 
     20 32 30 32 
     34 20 53 65 
     72 67 65 79 
     20 4B 69 73 
     65 6C 65 76 
     0D 0A           363       MSGSIGNIN:      .DB     'Z80 Processor Type Detection (C) 2024 Sergey Kiselev',CR,LF
C15D-50 72 6F 63 
     65 73 73 6F 
     72 20 66 61 
     6D 69 6C 79 
     3A 20 00        364                           .DB 'Processor family: ',EOS
C170-4C 6F 67 69 
     63 20 66 61 
     6D 69 6C 79 
     3A 20 20 20 
     20 20 00        365       MSGFAMILY:      .DB     'Logic family:     ',EOS
C183-4D 61 6E 75 
     66 61 63 74 
     75 72 65 72 
     3A 20 20 20 
     20 20 00        366       MSGVENDOR:      .DB     'Manufacturer:     ',EOS
C196-53 43 46 20 
     66 6C 61 67 
     73 20 74 65 
     73 74 3A 20 
     20 20 00        367       MSGFLAGS:       .DB     'SCF flags test:   ',EOS
C1A9-55 38 38 30 
     0D 0A 00        368       MSGU880:        .DB     'U880',CR,LF,EOS
C1B0-5A 38 30 0D 
     0A 00           369       MSGZ80:         .DB     'Z80',CR,LF,EOS
C1B6-4E 4D 4F 53 
     0D 0A 00        370       MSGNMOS:        .DB     'NMOS',CR,LF,EOS
C1BD-43 4D 4F 53 
     0D 0A 00        371       MSGCMOS:        .DB     'CMOS',CR,LF,EOS
C1C4-4D 4D 45 20 
     6F 72 20 54 
     68 65 73 79 
     73 0D 0A 00     372       MSGMME:         .DB     'MME or Thesys',CR,LF,EOS
C1D4-5A 69 6C 6F 
     67 20 6F 72 
     20 6E 6F 6E 
     2D 4D 4D 45 
     2F 54 68 65 
     73 79 73 20 
     63 6C 6F 6E 
     65 0D 0A 00     373       MSGNOTMME:      .DB     'Zilog or non-MME/Thesys clone',CR,LF,EOS
C1F4-5A 69 6C 6F 
     67 20 6F 72 
     20 53 47 53 
     2F 53 54 0D 
     0A 00           374       MSGZILOG:       .DB     'Zilog or SGS/ST',CR,LF,EOS
C206-54 6F 73 68 
     69 62 61 20 
     6F 72 20 4E 
     45 43 0D 0A 
     00              375       MSGTOSHIBA:     .DB     'Toshiba or NEC',CR,LF,EOS
C217-56 4D 31 0D 
     0A 00           376       MSGVM1:         .DB     'VM1',CR,LF,EOS
C21D-4E 45 43 0D 
     0A 00           377       MSGNEC:         .DB     'NEC',CR,LF,EOS
C223-20 55 6E 6B 
     6E 6F 77 6E     378       MSGUNKNOWN:     .DB     ' Unknown'
C22B-0D 0A 00        379       MSGCRLF:        .DB     CR,LF,EOS
C22E-                380
C22E-                381       ;       END
C22E-                382       ;************************************************************************
C22E-                383       ; ADDED BY ZEGAR.
C22E-                384       ;************************************************************************
C22E-                385       ;------------------------------------------------------------------------------
C22E-                386       ;---
C22E-                387       ;--- I/O subroutines
C22E-                388       ;---
C22E-                389       ;------------------------------------------------------------------------------
C22E-                390       WRSTR:
C22E-EB              391 (  4)                 EX DE,HL
C22F-CD 37 C2        392 ( 17)                 CALL puts
C232-EB              393 (  4)                 EX DE,HL
C233-CD 96 C2        394 ( 17)                 CALL FLUSH_TX
C236-C9              395 ( 10)                 RET
C237-                396       ;------------------------------------------------------------------------------
C237-                397       ;---
C237-                398       ;--- String subroutines
C237-                399       ;---
C237-                400       ;------------------------------------------------------------------------------
C237-                401
C237-                402       ;
C237-                403       ; Send a string to the serial line, HL contains the pointer to the string:
C237-                404       ;
C237-F5              405 ( 11) puts            push    af
C238-                406       ;                push    hl
C238-7E              407 (  7) puts_loop       ld      a, (hl)
C239-FE 00           408 (  7)                 cp      eos             ; End of string reached?
C23B-28 06           409 ( 7+)                 jr      z, puts_end     ; Yes
C23D-CD 45 C2        410 ( 17)                 call    putc
C240-23              411 (  6)                 inc     hl              ; Increment character pointer
C241-18 F5           412 ( 12)                 jr      puts_loop       ; Transmit next character
C243-                413       puts_end
C243-                414       ;                pop     hl
C243-F1              415 ( 10)                 pop     af
C244-C9              416 ( 10)                 ret
C245-                417       ;
C245-                418       ; Send a single character to the serial line (A contains the character):
C245-                419       ;
C245-                420       putc
C245-32 D6 C2        421 ( 13)                 LD      (SAVE_CHAR),A   ; instead of PUSH AF
C248-CD 89 C2        422 ( 17)                 CALL    CHECK_TX        ; try to send char from buffer
C24B-CD AE C2        423 ( 17)                 CALL    write_buffer    ; put new char in buffer
C24E-C9              424 ( 10)                 RET
C24F-                425       ;
C24F-                426       ; Wait for a single incoming character on the serial line
C24F-                427       ; and read it, result is in A:
C24F-                428       ;
C24F-                429       getc
C24F-CD 89 C2        430 ( 17)                 CALL    CHECK_TX        ; try to send char from buffer
C252-CD 75 C2        431 ( 17)                 CALL    READ_CHAR       ; is new char?
C255-28 F8           432 ( 7+)                 JR      Z,GETC          ; repeat if not
C257-C9              433 ( 10)                 RET                     ; in A new char
C258-                434
C258-                435       ;************************************************************************
C258-                436       ;*              I8255 INIT                                              *
C258-                437       ;*              CA80 USER PORT                                          *
C258-                438       ;************************************************************************
C258-                439       INIT_8255:
C258-3E 8A           440 (  7)     LD A,8AH            ;PA OUT, PB, PC IN
C25A-D3 E3           441 ( 11)     OUT (CONTR_8255),A
C25C-C9              442 ( 10)     RET
C25D-                443       ;************************************************************************
C25D-                444       ;*              I8251A INIT                                             *
C25D-                445       ;*      SEE RADIOELEKTRONIK 1/1994                                      *
C25D-                446       ;************************************************************************
C25D-                447       INIT_8251:
C25D-AF              448 (  4)         XOR     A
C25E-D3 E5           449 ( 11)         OUT     (CONTR_8251),A
C260-D3 E5           450 ( 11)         OUT     (CONTR_8251),A
C262-D3 E5           451 ( 11)         OUT     (CONTR_8251),A
C264-3E 40           452 (  7)         LD      A,40H               ;RESET
C266-D3 E5           453 ( 11)         OUT     (CONTR_8251),A
C268-3E 4E           454 (  7)         LD      A,4EH               ;8 BIT, 1 STOP, X16
C26A-D3 E5           455 ( 11)         OUT     (CONTR_8251),A
C26C-DB E4           456 ( 11)         IN      A,(DATA_8251)   ;FLUSH
C26E-DB E4           457 ( 11)         IN      A,(DATA_8251)
C270-3E 07           458 (  7)         LD      A,07H               ;RST=1, DTR=0, Rx Tx ON
C272-D3 E5           459 ( 11)         OUT     (CONTR_8251),A
C274-C9              460 ( 10)         RET
C275-                461
C275-                462       ;************************************************************************
C275-                463       ;*              I8251A READ CHAR                                        *
C275-                464       ;************************************************************************
C275-                465       READ_CHAR:
C275-DB E5           466 ( 11)         IN      A,(CONTR_8251)
C277-E6 02           467 (  7)         AND     02H             ; Rx ready?
C279-C8              468 ( 5+)         RET     Z               ; return if not
C27A-DB E4           469 ( 11)         IN      A,(DATA_8251)   ; read new char
C27C-C9              470 ( 10)         RET
C27D-                471
C27D-                472       ;************************************************************************
C27D-                473       ;*              I8251A SEND CHAR                                        *
C27D-                474       ;************************************************************************
C27D-                475       ; SEND_CHAR:
C27D-                476       ;       LD      (SAVE_CHAR),A
C27D-                477       ; SEND1:
C27D-                478       ;       IN      A,(CONTR_8251)
C27D-                479       ;       AND     01H
C27D-                480       ;       RET     Z
C27D-                481       ;       LD      A,(SAVE_CHAR)
C27D-                482       ;       OUT     (DATA_8251),A
C27D-                483       ;       RET
C27D-                484
C27D-                485       ; Z80 Ring Buffer with Empty/Full Check Example
C27D-                486
C27D-                487       ; Constants
C27D-                488       ;BUFFER_SIZE  equ 16    ; Define the size of the buffer
00FB-                489       BUFFER_START .equ 0FBH   ; Start address of the buffer in memory
C27D-                490
C27D-                491       ; Buffer initialization
C27D-                492       init_buffer:
C27D-AF              493 (  4)     XOR     A            ; Initialize the write and read pointers
C27E-DD 21 D4 C2     494 ( 14)     LD      IX,write_ptr
C282-DD 77 00        495 ( 19)     LD      (IX+0),A      ; write_ptr
C285-DD 77 01        496 ( 19)     LD      (IX+1),A      ; read_ptr
C288-C9              497 ( 10)     ret
C289-                498
C289-                499       CHECK_TX:
C289-DB E5           500 ( 11)     IN      A,(CONTR_8251)
C28B-E6 01           501 (  7)     AND     01H
C28D-C8              502 ( 5+)     RET     Z               ; return if Tx not ready
C28E-CD C1 C2        503 ( 17)     CALL    read_buffer
C291-B7              504 (  4)     OR      A
C292-C8              505 ( 5+)     RET     Z               ; return if buffer is empty
C293-D3 E4           506 ( 11)     OUT     (DATA_8251),A   ; send char
C295-C9              507 ( 10)         RET
C296-                508
C296-                509       FLUSH_TX:
C296-CD 9F C2        510 ( 17)     CALL    is_buffer_empty
C299-C8              511 ( 5+)     RET     Z               ; return if buffer is empty
C29A-CD 89 C2        512 ( 17)     CALL    CHECK_TX        ; try to send char from buffer
C29D-18 F7           513 ( 12)     JR      FLUSH_TX        ; repeat
C29F-                514
C29F-                515       ; Check if the buffer is empty
C29F-                516       is_buffer_empty:
C29F-DD 7E 00        517 ( 19)     LD      A,(IX+0)      ; write_ptr
C2A2-DD BE 01        518 ( 19)     CP      (IX+1)        ; read_ptr
C2A5-C9              519 ( 10)     ret                   ; Zero flag is set if buffer is empty
C2A6-                520
C2A6-                521       ; Check if the buffer is full
C2A6-                522       is_buffer_full:
C2A6-DD 7E 00        523 ( 19)     LD      A,(IX+0)      ; Get the current write pointer
C2A9-3C              524 (  4)     inc     a             ; Move to the next position
C2AA-DD BE 01        525 ( 19)     CP      (IX+1)        ; read_ptr
C2AD-C9              526 ( 10)     ret                   ; Zero flag is set if buffer is full
C2AE-                527
C2AE-                528       ; Write data to the buffer with full check
C2AE-                529       write_buffer:
C2AE-CD A6 C2        530 ( 17)     call    is_buffer_full ; Check if the buffer is full
C2B1-C8              531 ( 5+)     RET     Z           ; buffer_full   ; If the Zero flag is set, the buffer is full
C2B2-                532
C2B2-                533           ; Write data (assuming SAVE_CHAR holds the data to write)
C2B2-E5              534 ( 11)     PUSH    HL
C2B3-26 FB           535 (  7)     ld      H, BUFFER_START
C2B5-DD 6E 00        536 ( 19)     LD      L,(IX+0)        ; Get the current write pointer
C2B8-3A D6 C2        537 ( 13)     LD      A,(SAVE_CHAR)   ; put new char in buffer
C2BB-77              538 (  7)     ld      (hl), a         ; Write the data
C2BC-E1              539 ( 10)     POP     HL
C2BD-                540           ; Increment the write pointer
C2BD-DD 34 00        541 ( 23)     INC     (IX+0)          ; Move to the next position
C2C0-C9              542 ( 10)     ret
C2C1-                543
C2C1-                544       buffer_full:
C2C1-                545           ; Handle the error case (e.g., return without writing)
C2C1-                546           ;ret
C2C1-                547
C2C1-                548       ; Read data from the buffer with empty check
C2C1-                549       read_buffer:
C2C1-CD 9F C2        550 ( 17)     call    is_buffer_empty     ; Check if the buffer is empty
C2C4-28 0C           551 ( 7+)     JR      Z, buffer_empty     ; If the Zero flag is set, the buffer is empty
C2C6-                552
C2C6-                553           ; Read data
C2C6-E5              554 ( 11)     PUSH    HL
C2C7-26 FB           555 (  7)     ld      H, BUFFER_START
C2C9-DD 6E 01        556 ( 19)     LD      L,(IX+1)            ; Get the current read pointer
C2CC-7E              557 (  7)     ld      A,(hl)              ; Read the data
C2CD-E1              558 ( 10)     POP     HL
C2CE-                559           ; Increment the read pointer
C2CE-DD 34 01        560 ( 23)     INC     (IX+1)              ; Move to the next position
C2D1-C9              561 ( 10)     ret
C2D2-                562
C2D2-                563       buffer_empty:
C2D2-                564           ; Handle the empty case (e.g., return without reading)
C2D2-AF              565 (  4)     XOR     A
C2D3-C9              566 ( 10)     ret
C2D4-                567
C2D4-                568       ; Variables
C2D4-00              569       write_ptr:   .db 0      ; Write pointer (offset from BUFFER_START)
C2D5-00              570       read_ptr:    .db 0      ; Read pointer (offset from BUFFER_START)
C2D6-                571       SAVE_CHAR:
C2D6-FF              572           .DB 0FFH
C2D7-                573
C2D7-                574       ; FOR CAFL - MASS STORAGE CA80
C2D7-                575          ;################################################
C2D7-                576          ; po ostatnim bajcie naszego programu wpisujemy 2 x AAAA
C2D7-                577          ;.db 0AAh, 0AAh, 0AAh, 0AAh ; po tym markerze /2x AAAA/ nazwa programu
C2D7-                578          ;################################################
C2D7-AA AA AA AA     579        .db 0AAh, 0AAh, 0AAh, 0AAh ; marker nazwy
C2DB-5A 38 30 20 
     54 45 53 54 
     20 43 41 38 
     30 20 54 26 
     4E              580        .db "Z80 TEST CA80 T&N"    ; nazwa programu, max 16 znaków /dla LCD 4x 20 znakow w linii/
C2EC-FF              581        .db 0FFH                   ; koniec tekstu
C2ED-                582
C2ED-                583       ; koniec zabawy. :-)
C2ED-                584
C2ED-                585                       .end
